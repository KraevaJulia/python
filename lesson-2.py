#Задание 1
'''
Создать список и заполнить его элементами различных типов данных. 
Реализовать скрипт проверки типа данных каждого элемента. Использовать функцию type() для проверки типа. 
Элементы списка можно не запрашивать у пользователя, а указать явно, в программе.
'''
print('Задание 1')
my_list = [333, 3.33, -333, 'Привет', True, None] #Создаем список
for el in range(len(my_list)): #Перебираем список по его длине
	print(type(my_list[el])) #Выводим тип элемента из списка

#Задание 2
'''
Для списка реализовать обмен значений соседних элементов. 
Значениями обмениваются элементы с индексами 0 и 1, 2 и 3 и т. д. 
При нечётном количестве элементов последний сохранить на своём месте. 
Для заполнения списка элементов нужно использовать функцию input().
'''
print('Задание 2')
print('Введите количество элементов списка')
k = int(input())
i = 0 #Счетчик
my_list2 = [] #Создаем пустой список
while i < k: #Перебираем все символы. На один меньше, т.к начинаем с 0 индекса
	print(f'Введите {i} элемент списка')
	my_list2.append(input())
	i += 1
j = 0 #Счетчик
i = 0
for i in range(len(my_list2)//2): 
	my_list2[j], my_list2[j + 1] = my_list2[j + 1], my_list2[j]	#Элементы с номером j и j+1 меняются значениями между собой
	j += 2 #Считаем счетчик с шагом 2
print(my_list2)

#Задание 3
'''
Пользователь вводит месяц в виде целого числа от 1 до 12. 
Сообщить, к какому времени года относится месяц (зима, весна, лето, осень). 
Напишите решения через list и dict
'''
print('Задание 3')
my_list3 = ['Зима', 'Весна', 'Лето', 'Осень'] #Список сезонов - зима, весна, лето, осень
my_dict3 = {1 : 'winter', 2 : 'spring', 3 : 'summer', 4 : 'autumn'} #Словарь
n = 0 #Номер месяца
while (n <= 0) or (n > 12):
	print('Введите месяц в виде целого числа от 1 до 12')
	n = int(input())
if (n == 12) or (n == 1) or (n == 2):
	print(my_list3[0])
	print(my_dict3.get(1))
if (n == 3) or (n == 4) or (n == 5):
	print(my_list3[1])
	print(my_dict3.get(2))
if (n == 6) or (n == 7) or (n == 8):
	print(my_list3[2])
	print(my_dict3.get(3))
if (n == 9) or (n == 10) or (n == 11):
	print(my_list3[3])
	print(my_dict3.get(4))


#Задание 4
'''
Пользователь вводит строку из нескольких слов, разделённых пробелами. 
Вывести каждое слово с новой строки. Строки необходимо пронумеровать. 
Если в слово длинное, выводить только первые 10 букв в слове.
'''
print('Задание 4')
print('Введите строку из нескольких слов, разделённых пробелами')
my_str = input()
my_str1 = []
a = 1
for el in range(my_str.count(' ') + 1): #Перебираем по кол-ву вхождения символа ' ' + 1
    my_str1 = my_str.split() # Разбиваем строку по пустому символу (пробел)
    if len(str(my_str1)) <= 10: #Проверяем длину символов в новой строке
        print(f' {a} {my_str1 [el]}') 
        a = a + 1
    else:
        print(f' {a} {my_str1 [el] [0:10]}') #Выводим символы с 0 по 10
        a = a + 1

#Задание 5
'''
Реализовать структуру «Рейтинг», представляющую собой набор натуральных чисел, который не возрастает. 
У пользователя нужно запрашивать новый элемент рейтинга. 
Если в рейтинге существуют элементы с одинаковыми значениями, то новый элемент с тем же значением должен разместиться после них.
'''
print('Задание 5')
my_list4 = [7, 5, 3, 3, 2]
print(f'Начальный рейтинг - {my_list4}')
print('Введите число рейтинга')
c = int(input()) #элемент, который будем добавлять
while c != 12345:
	copy_list4 = my_list4.copy() #Делаем копию списка и работает только с копией
	for el in range(len(copy_list4)):
		if copy_list4[0] < c:
			k = 0 #Индекс куда надо добавить элемент
		elif copy_list4[-1] > c:
			k = len(copy_list4) + 1
		elif copy_list4[el] >= c and copy_list4[el+1] < c:
			k = el + 1
	copy_list4.insert(k, c) #Добавляем в позицию k элемент c
	print(copy_list4)
	c = int(input('Введите число рейтинга или 12345 - для выхода '))


#Задание 6
'''
Реализовать структуру данных «Товары». Она должна представлять собой список кортежей. 
Каждый кортеж хранит информацию об отдельном товаре. 
В кортеже должно быть два элемента — номер товара и словарь с параметрами, то есть характеристиками товара: 
название, цена, количество, единица измерения. Структуру нужно сформировать программно, запросив все данные у пользователя.

Нужно собрать аналитику о товарах. Реализовать словарь, в котором каждый ключ — характеристика товара, например, название. 
Тогда значение — список значений-характеристик, например, список названий товаров.
'''
print('Задание 6')
products, order = [], 1 #Словарь
name, price, amount = None, None, None #Название, цена, количество товара

while True: #Пока истина 
	if name is None:
		t = input('Введите название товара: ') #Временная переменная
		if not t.isalnum(): #Истина, если есть хоть один символ, иначе ложь
			print('Пусто. Попробуйте еще раз!')
			continue
		name = t #Присваиваем название товара

	if price is None:
		t = input('Введите стоимость товара: ')
		if not t.isdigit(): #Истина если есть хотя бы один символ и все они являются цифрами
			print('Некорректно. Попробуйте еще раз!')
			continue
		price = int(t)

	if amount is None:
		t = input('Введите количество: ')
		if not t.isdigit(): #Истина если есть хотя бы один символ и все они являются цифрами
			print('Некорректно. Попробуйте еще раз!')
			continue
		amount = int(t)

	t = input('Введите единицы измерения (буквами): ')
	if not t.isalpha(): #Истина если есть хотя бы один символ и все они являются буквами
		print('Некорректно. Попробуйте еще раз!')
		continue
	unit = t

	products.append(( #Формируем список
		order,
		{
			'Название': name,
			'Цена': price,
			'Количество': amount,
			'Единица': unit
		}
	))

	name, price, amount = None, None, None
	order += 1
	print(products)
	

	q = input('Закончили формирование списка? Нажмите "y" - если да ')
	if q.lower() == 'y': #приведение к нижнему регистру + проверка условия
		break

analitics = {
	'Название': [],
	'Цена': [],
	'Количество': [],
	'Единица': set()
}

for _, item in products: # _, традиционное обозначение ненужной переменной.
	analitics['Название'].append(item['Название'])
	analitics['Цена'].append(item['Цена'])
	analitics['Количество'].append(item['Количество'])
	analitics['Единица'].add(item['Единица'])

print(analitics)


g = input('Нажмите чтобы закрыть') 
