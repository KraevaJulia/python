#Задание 1
'''
Реализовать класс Matrix (матрица). 
Обеспечить перегрузку конструктора класса (метод __init__()), который должен принимать данные (список списков) для формирования матрицы.
Подсказка: матрица — система некоторых математических величин, расположенных в виде прямоугольной схемы.

Следующий шаг — реализовать перегрузку метода __str__() для вывода матрицы в привычном виде.

Далее реализовать перегрузку метода __add__() для реализации операции сложения двух объектов класса Matrix (двух матриц). 
Результатом сложения должна быть новая матрица.
Подсказка: сложение элементов матриц выполнять поэлементно — первый элемент первой строки первой матрицы складываем с первым элементом первой строки второй матрицы и т.д.
'''
print('Задание 1')
class Matrix:
	def __init__(self, matrix_1, matrix_2):
		self.matrix_1 = matrix_1
		self.matrix_2 = matrix_2
		
	def __str__(self):
		return str(('\n'.join(['\t'.join([str(j) for j in i]) for i in self.matrix_1])) + '\n'*2 + ('\n'.join(['\t'.join([str(j) for j in i]) for i in self.matrix_2])))
		
	def __add__(self):
		result = [[0, 0, 0], [0, 0, 0]]
		for i in range(len(self.matrix_1)):
			for j in range(len(self.matrix_1[i])):
				result[i][j] = self.matrix_1[i][j] + self.matrix_2[i][j]
		print(f'{result}\n')
		return str('\n'.join(['\t'.join([str(j) for j in i]) for i in result]))

a = [[1, 2, 3], [4, 5, 6]]
b = [[60, 30, 40], [70, 20, 110]]
print(a, '\n')
print(b, '\n')

m = Matrix(a, b)
print(m)
print(' ')
print(m.__add__())


#Задание 2
'''
Реализовать проект расчета суммарного расхода ткани на производство одежды. 
Основная сущность (класс) этого проекта — одежда, которая может иметь определенное название. 
К типам одежды в этом проекте относятся пальто и костюм. 
У этих типов одежды существуют параметры: размер (для пальто) и рост (для костюма). 
Это могут быть обычные числа: V и H, соответственно. 
Для определения расхода ткани по каждому типу одежды использовать формулы: для пальто (V/6.5 + 0.5), для костюма (2*H + 0.3).

Проверить работу этих методов на реальных данных.
Реализовать общий подсчет расхода ткани. 
Проверить на практике полученные на этом уроке знания: реализовать абстрактные классы для основных классов проекта, 
проверить на практике работу декоратора @property.

'''
print('Задание 2')
from abc import ABC, abstractmethod

class Clothes(ABC):
	def __init__(self, param):
		self.param = param
	
	@abstractmethod
	def my_total(self): 
		pass
	
	def __str__(self):
		return str(self.param)


class Coat(Clothes): #Пальто
	
	@property
	def my_total(self):
		s = self.param / 6.5 + 0.5
		return f'{s:.3f}'

class Suit(Clothes): #Костюм
	
	@property
	def my_total(self):
		s = self.param * 2 + 0.3
		return s		

x = Coat(56)
y = Suit(1.56)
print(x.my_total)
print(y.my_total)


#Задание 3
'''
Реализовать программу работы с органическими клетками, состоящими из ячеек. 
Необходимо создать класс Клетка. 
В его конструкторе инициализировать параметр, соответствующий количеству ячеек клетки (целое число). 
В классе должны быть реализованы методы перегрузки арифметических операторов: 
сложение (__add__()), вычитание (__sub__()), умножение (__mul__()), деление (__truediv__()). 
Данные методы должны применяться только к клеткам и выполнять увеличение, уменьшение, умножение и целочисленное (с округлением до целого) деление клеток, соответственно.

Сложение. 
Объединение двух клеток. При этом число ячеек общей клетки должно равняться сумме ячеек исходных двух клеток.
Вычитание. 
Участвуют две клетки. Операцию необходимо выполнять только если разность количества ячеек двух клеток больше нуля, иначе выводить соответствующее сообщение.
Умножение. 
Создается общая клетка из двух. Число ячеек общей клетки определяется как произведение количества ячеек этих двух клеток.
Деление. 
Создается общая клетка из двух. Число ячеек общей клетки определяется как целочисленное деление количества ячеек этих двух клеток.

В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и количество ячеек в ряду. 
Данный метод позволяет организовать ячейки по рядам.
Метод должен возвращать строку вида *****\n*****\n*****..., где количество ячеек между \n равно переданному аргументу. 
Если ячеек на формирование ряда не хватает, то в последний ряд записываются все оставшиеся.
Например, количество ячеек клетки равняется 12, количество ячеек в ряду — 5. Тогда метод make_order() вернет строку: *****\n*****\n**.
Или, количество ячеек клетки равняется 15, количество ячеек в ряду — 5. Тогда метод make_order() вернет строку: *****\n*****\n*****.

'''
print('Задание 3')
class Cell:
	def __init__(self, cell):
		self.cell = cell
		self.simbol = '*'

	def __str__(self):
		return str(f'Количество ячеек - {self.cell}')
	
	def __add__(self, other): 
		print('Сложение')
		return Cell(abs(self.cell + other.cell)) 
	def __sub__(self, other): 
		print('Вычитание')
		return Cell(abs(self.cell - other.cell)) 
	def __mul__(self, other): 
		print('Умножение')
		return Cell(self.cell * other.cell) 
	def __truediv__(self, other): 
		print('Деление')
		return Cell(self.cell // other.cell) #Целочисленное деление

	def make_order(self, count): #Организовываем ячейки по рядам
		x = self.cell
		while x > 0:
			for i in range(count):
				print(self.simbol, end ='')
				x -= 1
				if x <= 0:
					break
			print('\n', end = '')



a = Cell(7)
b = Cell(10)
c = Cell(6)
d = Cell(5)
print(a)
print(a + b)
print(a - b)
print(a * b)
print(c / d)

print()
a.make_order(2)
print()
b.make_order(4)


g = input('Нажмите чтобы закрыть') 