#Задание 1
'''
Реализовать скрипт, в котором должна быть предусмотрена функция расчета заработной платы сотрудника. 
В расчете необходимо использовать формулу: (выработка в часах * ставка в час) + премия. 
Для выполнения расчета для конкретных значений необходимо запускать скрипт с параметрами.
'''
print('Задание 1')
from sys import argv

def work():
	try:
		time = float(input('Выработка часов: '))
		rate = int(input('Ставка в час: '))
		bonus = int(input('Премия: '))
		result = time * rate + bonus
		print(f'Заработная плата сотрудника  {result}')
	except ValueError:
		return print('Неправильный ввод (вводите числа)')
work()


#Задание 2
'''
Представлен список чисел. Необходимо вывести элементы исходного списка, значения которых больше предыдущего элемента.
Подсказка: элементы, удовлетворяющие условию, оформить в виде списка. Для формирования списка использовать генератор.
'''
print('Задание 2')
my_list = [42, 1, 1, 1, 555, 3, 10, 23, 101, 333, 3, 11]
my_list1 = [el for el1, el in enumerate(my_list) if ((my_list[el1 - 1] < my_list[el1]) and (el1!= 0))] # enumerate - позволяет получить сразу и индекс и значение элемента

print(f'Исходный список: {my_list}')
print(f'Получившийся список: {my_list1}')
#Задание 3
'''
Для чисел в пределах от 20 до 240 найти числа, кратные 20 или 21. Необходимо решить задание в одну строку.
Подсказка: использовать функцию range() и генератор.
'''
print('Задание 3')

print(f'Числа в пределах от 20 до 240, кратные 20 или 21: {[el for el in range(20, 241) if ((el % 20 == 0) or (el % 21 == 0))]}')

#Задание 4
'''
Представлен список чисел. Определить элементы списка, не имеющие повторений. 
Сформировать итоговый массив чисел, соответствующих требованию. 
Элементы вывести в порядке их следования в исходном списке. Для выполнения задания обязательно использовать генератор.
'''
print('Задание 4')
my_list2 = [el for el in my_list if my_list.count(el) == 1] #Метод python count() подсчитывает количество вхождений элемента в списке и возвращает найденое значение. Если значение не 1 - значит есть повторение.
print(f'Исходный список: {my_list}')
print(f'Получившийся список: {my_list2}')

#Задание 5
'''
Реализовать формирование списка, используя функцию range() и возможности генератора. 
В список должны войти четные числа от 100 до 1000 (включая границы). 
Необходимо получить результат вычисления произведения всех элементов списка. Подсказка: использовать функцию reduce().
'''
print('Задание 5')
from functools import reduce 

def my_func(prev_el, el): # prev_el - предыдущий элемент, el - текущий элемент
	return prev_el * el

my_list3 = [el for el in range(100, 1001) if (el % 2 == 0)]
print(f'Список четных значений от 100 до 1000 (включая границы): {my_list3}')
print(f'Результат перемножения всех элементов списка: {reduce(my_func, my_list3)}')
#Задание 6
'''
Реализовать два небольших скрипта:
а) итератор, генерирующий целые числа, начиная с указанного,
б) итератор, повторяющий элементы некоторого списка, определенного заранее.

Подсказка: использовать функцию count() и cycle() модуля itertools. 
Обратите внимание, что создаваемый цикл не должен быть бесконечным. 
Необходимо предусмотреть условие его завершения.
'''
print('Задание 6')
from itertools import count
from itertools import cycle

for el in count(int(input('Введите начальное целое число от 0 до 14: '))):
	if el > 15: #Условие завершения (если число больше 15)
		break
	else:
		print(el)

с = 0 #Счетчик
print(f'Исходный список: {my_list}')
for el in cycle(my_list): #Повторяет элементы некоторого списка, определенного заранее.
	if с > 15: #Условие выхода из цикла
		break
	print(el)
	с += 1


#Задание 7
'''
Реализовать генератор с помощью функции с ключевым словом yield, создающим очередное значение. 
При вызове функции должен создаваться объект-генератор. Функция должна вызываться следующим образом: for el in fact(n). 
Функция отвечает за получение факториала числа, а в цикле необходимо выводить только первые n чисел, начиная с 1! и до n!.
'''
print('Задание 7')
from math import factorial

def fact(): 
	for el in count(1):
		yield factorial(el)

print('Введите целое положительное число n для вычисления, начиная с 1! и до n!: ')
n = int(input())
x = fact()
a = 0
for i in x:
	if a < n:
		print(i)
		a += 1
	else:
		break


g = input('Нажмите чтобы закрыть') 
